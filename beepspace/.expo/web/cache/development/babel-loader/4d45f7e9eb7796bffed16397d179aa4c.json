{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Platform = _interopRequireDefault(require(\"../../../exports/Platform\"));\n\nvar _RCTDeviceEventEmitter = _interopRequireDefault(require(\"./RCTDeviceEventEmitter\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    if (_Platform.default.OS === 'ios') {\n      (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    var _this$_nativeModule,\n        _this = this;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n\n    var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);\n\n    return {\n      remove: function remove() {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  };\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n\n    _RCTDeviceEventEmitter.default.removeListener(eventType, listener);\n  };\n\n  _proto.emit = function emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    _RCTDeviceEventEmitter.default.emit.apply(_RCTDeviceEventEmitter.default, [eventType].concat(args));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n\n    _RCTDeviceEventEmitter.default.removeAllListeners(eventType);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    return _RCTDeviceEventEmitter.default.listenerCount(eventType);\n  };\n\n  return NativeEventEmitter;\n}();\n\nexports.default = NativeEventEmitter;","map":{"version":3,"sources":["D:/xampp/htdocs/githubProjects/BeepSpace/beepspace/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js"],"names":["NativeEventEmitter","nativeModule","Platform","OS","_nativeModule","_proto","prototype","addListener","eventType","listener","context","_this$_nativeModule","_this","subscription","RCTDeviceEventEmitter","remove","_this$_nativeModule2","removeListeners","removeListener","_this$_nativeModule3","emit","_len","arguments","length","args","Array","_key","apply","concat","removeAllListeners","_this$_nativeModule4","listenerCount"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nvar NativeEventEmitter = /*#__PURE__*/function () {\n  function NativeEventEmitter(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    var _this$_nativeModule,\n        _this = this;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: function remove() {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  };\n\n  _proto.emit = function emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  };\n\n  return NativeEventEmitter;\n}();\n\nexport { NativeEventEmitter as default };"]},"metadata":{},"sourceType":"script"}